# HOME3P must already be defined
case `uname` in
  Linux )  export LOCAL_PREFIX=/usr/local ;;
# Darwin ) export LOCAL_PREFIX=/opt/local ;; # if compiling with MacPorts
  Darwin ) export LOCAL_PREFIX=/usr/local ;;
esac
export MINGW32=i686-pc-mingw32
export MINGW32_PREFIX=/usr/i686-pc-mingw32/sys-root/mingw
export CFLAGS=""
unset CDPATH
#
# echox
#   $1 = "on"/"off"
#
echox() {
  ECHO=`set -o | awk '/^xtrace/{print $2}'`
  if [ "$ECHO" = "on" ]; then
    [ "$1" = "off" ] && set +x
  else
    [ "$1" = "on" ] && set -x
  fi
  echo $ECHO
}
#
# arch
#  i386, x86_64, <unknown>
#
arch() {
  set +x
  case `uname -m` in
    i386 | i486 | i586 | i686 )
      echo i386
      ;;
    x86_64 | x64 )
      echo x86_64
      ;;
    * )
      uname -m
      ;;
  esac
  set -x
  return 0
}
#
# os
#  CentOS, RHEL, Ubuntu, Debian, openSUSE, MacOS, <unknown>
#
os() {
  set +x
  case `uname` in
    Linux )
      # CentOS, RHEL, Ubuntu, Debian, openSUSE
      awk '{
  sub("Welcome to",""); # Appears in openSUSE
  if (match($0, "Red Hat Enterprise Linux")) { print "RHEL"; }
  else { print $1; }
  exit 0
}' /etc/issue
      if [ $? -ne 0 ]; then
        set -x
        return 1
      fi
      ;;
    Darwin )
      echo MacOS
      ;;
    * )
      uname
      ;;
  esac
  set -x
  return 0
}
#
# chkprog
#
chkprog() {
  which "$1" >/dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "$1 is missing"
    return 1
  fi
  return 0
}
#
# chksudo
#
chksudo() {
  if [ `id -u` -eq 0 ]; then
    return 0
  elif [ -z "$SUDOPWD" ]; then
    USER=`id -un`
    SUDOPWD=`getpwd "[sudo] password for $USER: "`
    sudo -S -p "" id << EOF
$SUDOPWD
EOF
    if [ $? -ne 0 ]; then
      SUDOPWD=""
      return 1
    fi
  fi
  return 0
}
#
# getpwd
#
getpwd() {
  unset ANS
# Allow password to be empty
# while [ -z "$ANS" ]; do
    echo -n "$1" 1>&2
    read -s ANS
    echo "" 1>&2
# done
  echo "$ANS"
  return 0
}
#
# getans
#
getans() {
  unset ANS
  DEF=${1##*\[}; DEF=${DEF%%\]*}
  if [ "$DEF" != "$1" ]; then
    echo -n "$1" 1>&2
    read ANS
    if [ -z "$ANS" ]; then
      ANS=$DEF
    fi
  else
    while [ -z "$ANS" ]; do
      echo -n "$1" 1>&2
      read ANS
    done
  fi
  echo "$ANS"
  return 0
}
#
# getcfg
#   $1 = keyword to search in config.txt
#
getcfg() {
  set +x
  awk '/^[ 	]*'$1'/ {
  sub("^[ 	]*'$1'[ 	]*", "");
  sub("[ 	]*$", "");
  print $0
}' config.txt
  if [ $? -ne 0 ]; then
    set -x
    return 1
  fi
  set -x
  return 0
}
#
# shasumx
#   $1 = file name for sha1sum
#
shasumx() {
  case `uname` in
    Linux )
      sha1sum "$1" | awk '{print $1}'
      [ ${PIPESTATUS[0]} -ne 0 -o ${PIPESTATUS[1]} -ne 0 ] && return 1
      ;;
    Darwin )
      shasum "$1" | awk '{print $1}'
      [ ${PIPESTATUS[0]} -ne 0 -o ${PIPESTATUS[1]} -ne 0 ] && return 1
      ;;
  esac
  return 0
}
#
# copypkg
#
copypkg() {
  [ -z "$HOME3P" ] && HOME3P=.
  [ ! -f "${HOME3P}/tarballs/$1" ] && return 1
  cp "${HOME3P}/tarballs/$1" .
  [ $? -ne 0 ] && return 1
  return 0
}
#
# download
#   $1 = directory to enter for download
#
download() {
  OLDCD=`pwd`
  [ $? -ne 0 ] && return 1
  cd "$1"
  [ $? -ne 0 ] && return 1
  if [ -x download-sources -a ! "`pwd`" = "$OLDCD" ]; then
    ./download-sources
    [ $? -ne 0 ] && return 1
  else
    if [ -f config.txt ]; then
      for ii in "" 1 2 3; do
        for url in `getcfg URL${ii}:`; do
          pkg=`getcfg PKG${ii}:`
          if [ -z "$pkg" ]; then
            echo "PKG${ii} not defined for URL${ii}: $url"
            continue
          fi
          if [ ! -f "$pkg" ]; then
            copypkg "$pkg"
            if [ $? -ne 0 ]; then
              wget -4O "$pkg" "$url"
              if [ $? -ne 0 ]; then
                rm -f "$pkg"
                return 1
              fi
            fi
          fi
          sha=`getcfg SHA${ii}:`
          if [ -n "$sha" ]; then
            shax=`shasumx "$pkg"`
            if [ "$shax" != "$sha" ]; then
              echo "Error transferring PKG${ii}: $pkg"
              return 1
            fi
          fi
        done
      done
    fi
  fi
  cd "$OLDCD"
  [ $? -ne 0 ] && return 1
  return 0
}
#
# cleanup
#   $1 = directory to enter for clean-up
#   $2 = optional parameter for clean-up script ("all")
#
cleanup() {
  OLDCD=`pwd`
  [ $? -ne 0 ] && return 1
  cd "$1"
  [ $? -ne 0 ] && return 1
  if [ -x clean-up -a ! "`pwd`" = "$OLDCD" ]; then
    ./clean-up "$2"
    [ $? -ne 0 ] && return 1
  else
    if [ -f config.txt ]; then
      pkg=`getcfg PKG:`
      pkg1=`getcfg PKG1:`
      pkg2=`getcfg PKG2:`
      pkg3=`getcfg PKG3:`
      dir=`getcfg DIR:`
      [ "$dir" = "/" ] && dir=""
      pcp=`getcfg PCP:`
      pcp1=`getcfg PCP1:`
      pcp2=`getcfg PCP2:`
      pcp3=`getcfg PCP3:`
      #
      rm -fr "$dir"
      #
      rm -fr "${dir}-win32"
      rm -f "$pcp" "$pcp1" "$pcp2" "$pcp3"
      rm -f .done-win32
      #
      rm -fr "${dir}-linux"
      rm -f .done-linux
      #
      rm -fr "${dir}-mac"
      rm -f .done-mac
      #
      if [ "$2" = "all" ]; then
        rm -f "$pkg" "$pkg1" "$pkg2" "$pkg3"
      fi
    fi
  fi
  cd "$OLDCD"
  [ $? -ne 0 ] && return 1
  return 0
}
#
# compile
#   $1 = directory to enter for compile
#   $2 = which compile to invoke ("linux", "win32" or "mac")
#
compile() {
  set +x
  OS=`uname`
  [ "$OS" = "Darwin" ] && OS=MacOS
  WHAT="${OS}-$2"
  case "$WHAT" in
    Linux-linux ) ;;
    Linux-win32 ) ;;
    MacOS-mac ) ;;
    * )
      echo "Don't know how to compile $1 for \"$2\" on $OS"
      set -x
      return 1
      ;;
  esac
  set -x
  OLDCD=`pwd`
  [ $? -ne 0 ] && return 1
  cd "$1"
  [ $? -ne 0 ] && return 1
  if [ -x ${2}-compile -a ! "`pwd`" = "$OLDCD" ]; then
    ./${2}-compile
    [ $? -ne 0 ] && return 1
  fi
  cd "$OLDCD"
  [ $? -ne 0 ] && return 1
  return 0
}
#
# sudox
#   $@ = command line to be executed as root
#   $SUDOPWD = password for sudo (if defined)
#
sudox() {
  set +x
  if [ `id -u` -eq 0 ]; then
    "$@"
    RC=$?
  elif [ -n "$SUDOPWD" ]; then
    sudo -S -p "" "$@" << EOF
$SUDOPWD
EOF
    RC=$?
  else
    sudo "$@"
    RC=$?
  fi
  set -x
  return $RC
}
#
# copypc
#
copypc() {
  LOC=`expr "$1" : '/*\(.*\)'`
  [ -z "$HOME3P" ] && HOME3P=.
  DEST="${HOME3P}/$LOC"; shift
  if [ ! -d "$DEST" ]; then
    rm -f "$DEST"
    mkdir -p "$DEST"
    [ $? -ne 0 ] && return 1
  fi
  cp "$@" "$DEST"
  [ $? -ne 0 ] && return 1
  return 0
}
#
# fix_scons
#
fix_scons() {
  cat > files.lst << EOF
/usr/lib/scons-1.2.0/SCons/Tool/mingw.py
/usr/lib/scons-2.0.1/SCons/Tool/mingw.py
/usr/lib/scons/SCons/Tool/mingw.py
/usr/local/lib/scons-1.2.0/SCons/Tool/mingw.py
/usr/local/lib/scons-2.0.1/SCons/Tool/mingw.py
/usr/local/lib/scons/SCons/Tool/mingw.py
EOF
  [ $? -ne 0 ] && exit 1
  for file in `cat files.lst`; do
    if [ -s "$file" ]; then
      sudox cp ${HOME3P}/base_libs/scons/mingw.py "$file"
      [ $? -ne 0 ] && return 1
    fi
  done
  rm -f files.lst
  [ $? -ne 0 ] && return 1
  return 0
}
