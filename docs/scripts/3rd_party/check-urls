#!/bin/bash
TMPFILE=`mktemp /tmp/${0##*/}.XXXXX`
trap 'rm -f $TMPFILE' 0
UA="Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)"
#UA="Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.9) Gecko/20100824 Firefox/3.6.9"
NOTFOUND=not_found.txt
set -x
[ -z "$HOME3P" ] && export HOME3P=`cd "${0%/*}" 2>/dev/null; echo $PWD`
source "${HOME3P}/utilx"
[ $? -ne 0 ] && exit 1
#
export CENTOS_MIRROR=`getmcfg CENTOS_MIRROR:`
export EPEL_MIRROR=`getmcfg EPEL_MIRROR:`
export RPMFORGE_MIRROR=`getmcfg RPMFORGE_MIRROR:`
export MACPORTS_SVN=`getmcfg MACPORTS_SVN:`
#
getcfgx() {
  set +x
  CFG=`awk '
/^[     ]*'$1'/ {
  sub("^[       ]*'$1'[         ]*", "");
  sub("[        ]*$", "");
  print $0
}' $2`
  if [ $? -ne 0 ]; then
    set -x
    return 1
  fi
  eval echo "$CFG"
  set -x
  return 0
}
#
fetch() {
# wget -U "$UA" --spider "$1"
  java wget -h "$1"
  error=$?
  if [ $error -ne 0 ]; then
    # Check if protocol error
    if [ $error -eq 102 ]; then
      # Try with wget instead
      wget -U "$UA" --spider "$1"
      [ $? -ne 0 ] && echo "$1" >> "$2"
    else
      echo "$1" >> "$2"
    fi
  fi
  return 0
}
#
# 1. Check master config
#
awk '
  /^[ 	]*[^#]+$/ {
    sub("^[ 	]*", ""); sub("[ 	]*$", "");
    prog = $1;
    if (match(prog, "._url:$")) {
      sub("_url:$", "", prog);
      sub("[^ 	]+_url:[ 	]*", "");
      sub("[/]*$", "");
      url[prog] = $0;
    }
    else if (match(prog, "._pkg[s]*:$")) {
      sub("_pkg[s]*:$", "", prog);
      sub("[^ 	]+_pkg[s]*:[ 	]*", "");
      pkgs[prog] = $0;
    }
  }
END {
  for (ii in url) {
    if (ii in pkgs) {
      n = split(pkgs[ii], a);
      for (jj = 1; jj <= n; jj++) {
        print url[ii] "/" a[jj]
      }
    }
    else {
      print "URL for " ii " defined without packages in master config.txt" > "/dev/stderr"
    }
  }
  for (ii in pkgs) {
    if (!(ii in url)) {
      print "Pkgs for " ii " defined without URL in master config.txt" > "/dev/stderr"
    }
  }
}' "${HOME3P}/config.txt" > $TMPFILE
[ $? -ne 0 ] && exit 1
#
sort -fu $TMPFILE > "$NOTFOUND"
[ $? -ne 0 ] && exit 1
mv "$NOTFOUND" $TMPFILE
[ $? -ne 0 ] && exit 1
MAXN=`awk 'END {print NR}' $TMPFILE`
[ $? -ne 0 ] && exit 1
touch "$NOTFOUND"
[ $? -ne 0 ] && exit 1
if [ ! -s wget.class ]; then
  javac -d . "${HOME3P}/wget.java"
  [ $? -ne 0 ] && exit 1
fi
N=1
while [ $N -le $MAXN ]; do
  URL=`awk 'NR=='$N' {print; exit}' $TMPFILE`
  [ $? -ne 0 ] && exit 1
  # Expand mirror variables
  URL=`eval echo "$URL"`
  fetch "$URL" "$NOTFOUND"
  N=`expr $N + 1`
done
#
# 2. Check all other configs
#
for config in `find . -name config.txt`; do
  URL=`getcfgx URL: $config`
  [ -n "$URL" ] && fetch "$URL" "$NOTFOUND"
  URL1=`getcfgx URL1: $config`
  [ -n "$URL1" ] && fetch "$URL1" "$NOTFOUND"
  URL2=`getcfgx URL2: $config`
  [ -n "$URL2" ] && fetch "$URL2" "$NOTFOUND"
  URL3=`getcfgx URL3: $config`
  [ -n "$URL3" ] && fetch "$URL3" "$NOTFOUND"
  URL4=`getcfgx URL4: $config`
  [ -n "$URL4" ] && fetch "$URL4" "$NOTFOUND"
done
#
if [ -s "$NOTFOUND" ]; then
  echo "`awk 'END {print NR}' "$NOTFOUND"` URLs not found - see file \"$NOTFOUND\""
  exit 1
fi
echo "All URLs found"
exit 0
