<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:osgi="http://www.springframework.org/schema/osgi"
  xmlns:sec="http://www.springframework.org/schema/security"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/osgi
       http://www.springframework.org/schema/osgi/spring-osgi.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security-2.0.4.xsd">

<!-- Specify the URL-based security scheme -->
  <bean id="filterSecurityInterceptor"
      class="org.springframework.security.intercept.web.FilterSecurityInterceptor">
    <property name="authenticationManager" ref="authenticationManager"/>
    <property name="accessDecisionManager" ref="httpRequestAccessDecisionManager"/>
    <property name="objectDefinitionSource">
      <sec:filter-invocation-definition-source>
        <!-- Allow anonymous access to everything -->
        <sec:intercept-url pattern='/**' access='ROLE_ANONYMOUS,ROLE_USER'/>
      </sec:filter-invocation-definition-source>
    </property>
  </bean>

<!-- Specify the authentication filter chain -->
  <bean id="SecurityFilterChain" class="org.springframework.security.util.FilterChainProxy">
    <sec:filter-chain-map path-type="ant">
      <sec:filter-chain pattern="/**"
        filters="httpSessionContextIntegrationFilterWithASCFalse,x509Filter,basicProcessingFilter,anonymousProcessingFilter,exceptionTranslationFilter,filterSecurityInterceptor" />
    </sec:filter-chain-map>
  </bean>

  <bean id="httpSessionContextIntegrationFilterWithASCFalse"
    class="org.springframework.security.context.HttpSessionContextIntegrationFilter">
    <property name="allowSessionCreation" value="false" />
  </bean>

  <bean id="basicProcessingFilter"
    class="org.springframework.security.ui.basicauth.BasicProcessingFilter">
    <property name="authenticationManager">
      <ref bean="authenticationManager" />
    </property>
    <property name="authenticationEntryPoint">
      <ref bean="authenticationEntryPoint" />
    </property>
  </bean>

  <bean id="authenticationEntryPoint"
    class="org.springframework.security.ui.basicauth.BasicProcessingFilterEntryPoint">
    <property name="realmName">
      <value>Restricted resources</value>
    </property>
  </bean>

  <bean id="authenticationManager" class="org.springframework.security.providers.ProviderManager">
    <property name="providers">
      <list>
        <ref local="x509AuthenticationProvider" />
        <ref local="daoAuthenticationProvider" />
      </list>
    </property>
  </bean>

  <bean id="daoAuthenticationProvider"
    class="org.springframework.security.providers.dao.DaoAuthenticationProvider">
    <property name="userDetailsService" ref="userDetailsService" />
    <property name="forcePrincipalAsString">
      <value>true</value>
    </property>
  </bean>

  <bean id="x509AuthenticationProvider"
    class="org.springframework.security.providers.preauth.PreAuthenticatedAuthenticationProvider">
    <property name="preAuthenticatedUserDetailsService">
      <bean class="org.springframework.security.userdetails.UserDetailsByNameServiceWrapper">
        <property name="userDetailsService" ref="userDetailsService" />
      </bean>
    </property>
  </bean>

  <bean id="x509Filter"
    class="org.springframework.security.ui.preauth.x509.X509PreAuthenticatedProcessingFilter">
    <property name="authenticationManager" ref="authenticationManager" />
    <property name="principalExtractor">
      <bean class="org.springframework.security.ui.preauth.x509.SubjectDnX509PrincipalExtractor" />
    </property>
  </bean>

  <sec:user-service id="userDetailsService">
    <sec:user name="admin" password="opencast" authorities="ROLE_ADMIN, ROLE_USER" />
    <sec:user name="sample_machine" password="matterhorn" authorities="ROLE_ADMIN, ROLE_USER" />
  </sec:user-service>

  <bean id="anonymousProcessingFilter"
      class="org.springframework.security.providers.anonymous.AnonymousProcessingFilter">
    <property name="key" value="foobar"/>
    <property name="userAttribute" value="anonymousUser,ROLE_ANONYMOUS"/>
  </bean>
  
  <bean id="anonymousAuthenticationProvider"
      class="org.springframework.security.providers.anonymous.AnonymousAuthenticationProvider">
    <property name="key" value="foobar"/>
  </bean>
  
  <bean id="httpRequestAccessDecisionManager" class="org.springframework.security.vote.AffirmativeBased">
    <property name="allowIfAllAbstainDecisions" value="false" />
    <property name="decisionVoters">
      <list>
        <ref bean="roleVoter" />
      </list>
    </property>
  </bean>

  <bean id="roleVoter" class="org.springframework.security.vote.RoleVoter" />

  <bean id="exceptionTranslationFilter"
    class="org.springframework.security.ui.ExceptionTranslationFilter">
    <property name="createSessionAllowed" value="false" />
    <property name="authenticationEntryPoint" ref="authenticationEntryPoint" />
    <property name="accessDeniedHandler">
      <bean class="org.springframework.security.ui.AccessDeniedHandlerImpl" />
    </property>
  </bean>

  <!-- Logging interceptors, in case they are needed -->
  <!--

  -->
  <bean class="org.springframework.security.event.authentication.LoggerListener" />
  <bean class="org.springframework.security.event.authorization.LoggerListener" />
  
  <!-- Publish the filter chain as an OSGi service -->

  <osgi:service id="SecurityFilterChainOsgi" ref="SecurityFilterChain"
    interface="javax.servlet.Filter">
    <osgi:service-properties>

    <!-- Flag this filter to be used by CXF for the rest endpoints (the prop key changed, so register both) -->
      <entry>
        <key>
          <value>org.apache.cxf.rs.httpservice.filter</value>
        </key>
        <value>true</value>
      </entry>
      <entry>
        <key>
          <value>org.apache.cxf.httpservice.filter</value>
        </key>
        <value>true</value>
      </entry>

    <!-- Flag this filter to be used by the Matterhorn secure HttpContext -->
      <entry>
        <key>
          <value>org.opencastproject.filter</value>
        </key>
        <value>true</value>
      </entry>

    <!-- Pax web will pick up this filter, and will complain if no servletNames or urlPatterns are specified -->
      <entry>
        <key>
          <value>servletNames</value>
        </key>
        <value>none</value>
      </entry>
    </osgi:service-properties>
  </osgi:service>

</beans>

