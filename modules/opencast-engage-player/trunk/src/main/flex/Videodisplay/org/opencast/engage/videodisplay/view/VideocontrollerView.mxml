<?xml version="1.0" encoding="utf-8"?>
<!--
/**
 *  Copyright 2009 The Regents of the University of California
 *  Licensed under the Educational Community License, Version 2.0
 *  (the "License"); you may not use this file except in compliance
 *  with the License. You may obtain a copy of the License at
 *
 *  http://www.osedu.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS"
 *  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 *  or implied. See the License for the specific language governing
 *  permissions and limitations under the License.
 *
 */
 -->
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%"
	height="40"
	backgroundAlpha="1.0"
	xmlns:view="org.opencast.engage.videodisplay.view.*"
	creationComplete="{ onCreationComplete() }"
	>
    
<mx:Script>
        <![CDATA[
        	import bridge.ExternalFunction;
        	import org.opencast.engage.videodisplay.state.PlayerState;
        	import org.opencast.engage.videodisplay.control.event.VideoControlEvent;
        	import org.swizframework.Swiz;
        	import org.opencast.engage.videodisplay.model.VideodisplayModel;
        	import mx.core.Application;
            import mx.controls.Alert;
        	import flash.external.ExternalInterface;
           
            [Autowire]
            [Bindable]
            public var model:VideodisplayModel;
            
            
            /**
             * onCreationComplete
             * 
             * */
            private function onCreationComplete():void
            {
                var myfilters:Array = [];
                var dropShadow:DropShadowFilter = new DropShadowFilter();
                dropShadow.distance = 0;
                dropShadow.angle = 25;
                dropShadow.alpha = 1.0;
                dropShadow.blurX = 3;
                dropShadow.blurY = 3;
                dropShadow.strength = 2;
                dropShadow.quality = 3;
                
                myfilters.push(dropShadow);
                
                lb_currentTime.filters = myfilters;
                lb_durationTime.filters = myfilters;
            }
            
            /**
             * onSeek
             * 
             * Seek the video
             * 
             * */
            private function onSeek():void
            {
                if ( model.player.seekable )
                {
                   model.player.seek(seekBar.value);
                }   
            }
            
            /**
             * onVolume
             * 
             * Change the volume of the video
             * 
             * */
            private function onVolume():void
            {
                model.player.volume = volumeSlider.value;
                ExternalInterface.call(ExternalFunction.SETVOLUME, volumeSlider.value * 100);
                ExternalInterface.call(ExternalFunction.OPENCASTVOLUME, volumeSlider.value);
            }
           
            /**
             * seekDataTipFunc
             * 
             * Generate the string for the tool tip of the Seek Slider.
             * 
             * */
            private function seekDataTipFunc(val:String):String 
            {
                var value:int = int(val);
                return model.timeCode.getTC(value);
            }
            
            /**
             * volumeDataTipFunc
             * 
             * Generate the string for the tool tip of the Seek Slider.
             * 
             * */
            private function volumeDataTipFunc(val:String):String 
            {
                var numb:Number = new Number( val );
                return (numb * 100).toFixed(0) + ' %';
            }
            
        ]]>
    </mx:Script>
    
    <mx:Fade id="fadeOut" duration="100" alphaFrom="1.0" alphaTo="0.0"/>
    <mx:Fade id="fadeIn" duration="100" alphaFrom="0.0" alphaTo="1.0"/>
    
    	
    <mx:HBox 
    	id="hb_videocontroller"
    	width="100%"
    	height="40"
    	backgroundColor="#000000"
        backgroundAlpha="0.0"
    	verticalAlign="middle"
    	visible="false"
    	hideEffect="{ fadeOut }" 
    	showEffect="{ fadeIn }"
    	rollOut="{ this.hb_videocontroller.visible = false  }"
        >
    	
        <mx:Label 
        	id="lb_currentTime"
	    	width="80"
	    	textAlign="center"
	    	text="{ model.timeCode.getTC(model.currentPlayhead) }"
	    	styleName="videocontrollerLabel"
	    	toolTip="Current Time {model.timeCode.getTC(model.currentPlayhead) } "
	    	/>
	    	
	    <mx:Label 
	        width="25"
	        textAlign="center"
	        text="of"
	        styleName="videocontrollerLabel"
	        />	
	    
	    <mx:Label 
	    	id="lb_durationTime"
	    	width="80"
	    	textAlign="center"
	    	text="{ model.timeCode.getTC(model.currentDuration) }"
	    	styleName="videocontrollerLabel"
	    	toolTip="Duration {model.timeCode.getTC(model.currentDuration) } "
	    	/>
	    	
	    <mx:Spacer 
	    	width="20"
	    	/>
	    
	    <mx:Button 
	    	width="40"
	    	height="40"
	    	y="-40"
	    	toolTip="Skip Backward Button"
	    	styleName="SkipBackward"
	    	click="{ Swiz.dispatchEvent( new VideoControlEvent(VideoControlEvent.SKIPBACKWARD)) }"
	    	/>
	    	
	    <mx:Button 
	    	width="40"
	        height="40"
	        toolTip="Rewind Button"
	        styleName="Rewind"
	        click="{ Swiz.dispatchEvent( new VideoControlEvent(VideoControlEvent.REWIND)) }"
	        />
	        
	    <mx:Button 
	    	width="40"
	        height="40"
	    	toolTip="{ model.currentPlayerState == PlayerState.PAUSING ? 'Play Button' : 'Pause Button' }"
	        styleName="{ model.currentPlayerState == PlayerState.PAUSING ? 'Play' : 'Pause' }"
	        click="{ model.currentPlayerState == PlayerState.PLAYING ? Swiz.dispatchEvent( new VideoControlEvent(VideoControlEvent.PAUSE)) : Swiz.dispatchEvent( new VideoControlEvent(VideoControlEvent.PLAY)); }"
	        />
	    
	    <mx:Button 
	    	width="40"
	        height="40"
	    	toolTip="Fast Forward Button"
	        styleName="FastForward"
	        click="{ Swiz.dispatchEvent( new VideoControlEvent(VideoControlEvent.FASTFORWARD)) }"
	        />
	        
	    <mx:Button 
	        width="40"
	        height="40"
	        toolTip="Skip Forward Button"
	        styleName="SkipForward"
	        click="{ Swiz.dispatchEvent( new VideoControlEvent(VideoControlEvent.SKIPFORWARD)) }"
	        />  
	        
	     <mx:Spacer 
	        width="20"
	        />
	        
	     <mx:Canvas
	     	width="100%"
	     	height="20"
	     	>
	     	
	        <view:ProgressBarView 
            	id="pg_video"
            	width="100%"
            	height="100%"
            	/>
            
            <mx:HSlider                
                id = "seekBar" 
                width="100%"
                maximum="{ model.currentDuration }"
                value="{ model.currentPlayhead }"
                change="{ onSeek() }"
                toolTip="Current Time {model.timeCode.getTC(model.currentPlayhead) } "
                dataTipFormatFunction="seekDataTipFunc"
                styleName="HSliderSeek"
                />
	        
	     </mx:Canvas>   
	     
	     <mx:Spacer 
	        width="20"
	        />
	        
	     <mx:Button 
	        width="40" height="40" 
	        toolTip="{ model.videoVolume == 0 ? 'Mute' : 'Unmute'}"
	        click="{ Swiz.dispatchEvent( new VideoControlEvent( VideoControlEvent.MUTE )) }"
	        styleName="{ model.videoVolume == 0 ? 'volumeMuteBig' : 'volumeHighBig' }"
	        />   
	        
	     <mx:Spacer 
	        width="20"
	        />
	        
	     <mx:HSlider     
	        width = "50"    
	        maximum = "1"
	        id = "volumeSlider" 
	        change = "{ onVolume() }"
	        value = "{ model.videoVolume }"
	        toolTip="Volume:  { (model.videoVolume * 100).toFixed(0) } %"
	        styleName="HSliderVolume"
	        dataTipFormatFunction="volumeDataTipFunc"
	        />
	        
	    <mx:Spacer 
	        width="20"
	        />
	        
	    <mx:Button 
	        width="40"
	        height="40" 
	        toolTip="{ model.ccBoolean == true ? 'Closed Caption On' : 'Closed Caption Off' }"
	        styleName="{ model.ccBoolean == true ? 'ccOff' : 'ccOn' }"
	        click="{ Swiz.dispatchEvent( new VideoControlEvent(VideoControlEvent.CLOSEDCAPTIONS)) }"
	       />  
	    
	    <mx:Spacer 
            width="20"
            />

    </mx:HBox>
    
    <mx:Canvas 
        width="100%"
        height="40"
        backgroundColor="#000000"
        backgroundAlpha="0.0"
        rollOver="{ this.hb_videocontroller.visible = true   }"
        visible="{ this.hb_videocontroller.visible == true ? false : true }"
        />
    
</mx:Canvas>
