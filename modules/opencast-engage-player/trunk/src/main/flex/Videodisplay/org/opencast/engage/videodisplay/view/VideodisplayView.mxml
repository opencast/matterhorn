<?xml version="1.0" encoding="utf-8"?>
<!--
	/**
	 *  Copyright 2009 The Regents of the University of California
	 *  Licensed under the Educational Community License, Version 2.0
	 *  (the "License"); you may not use this file except in compliance
	 *  with the License. You may obtain a copy of the License at
	 *
	 *  http://www.osedu.org/licenses/ECL-2.0
	 *
	 *  Unless required by applicable law or agreed to in writing,
	 *  software distributed under the License is distributed on an "AS IS"
	 *  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
	 *  or implied. See the License for the specific language governing
	 *  permissions and limitations under the License.
	 *
	 */
	 -->
<mx:Canvas width="100%"
	height="100%"
	xmlns:players="com.adobe.strobe.players.*"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:view="org.opencast.engage.videodisplay.view.*"
	resize="{ resizeVideodisplay() }">
	<mx:Script>
		<![CDATA[
			import bridge.ExternalFunction;
			import org.openvideoplayer.events.VolumeChangeEvent;
			import org.opencast.engage.videodisplay.control.event.ResizeVideodisplayEvent;
			import mx.controls.Alert;
			import org.openvideoplayer.utils.URL;
			import org.openvideoplayer.proxies.TemporalProxyElement;
			import org.openvideoplayer.composition.SerialElement;
			import org.openvideoplayer.composition.ParallelElement;
			import org.opencast.engage.videodisplay.control.event.DisplayCaptionEvent;
			import org.opencast.engage.videodisplay.control.event.LoadDFXPXMLEvent;
		  	import org.openvideoplayer.net.NetLoadedContext;
		  	import org.openvideoplayer.events.MediaPlayerCapabilityChangeEvent;
		 	import org.openvideoplayer.events.BufferTimeChangeEvent;
		  	import org.openvideoplayer.events.BufferingChangeEvent;
		  	import org.swizframework.Swiz;
		  	import org.opencast.engage.videodisplay.control.event.VideoControlEvent;
			import org.opencast.engage.videodisplay.control.util.TimeCode;
			import org.opencast.engage.videodisplay.model.VideodisplayModel;
			import org.openvideoplayer.events.DurationChangeEvent;
			import org.openvideoplayer.display.ScaleMode;
			import org.openvideoplayer.events.PlayheadChangeEvent;
			import org.openvideoplayer.events.DimensionChangeEvent;
			import org.openvideoplayer.traits.LoadState;
			import org.openvideoplayer.events.LoadableStateChangeEvent;
			import org.openvideoplayer.traits.MediaTraitType;
			import org.openvideoplayer.traits.ILoadable;
			import org.openvideoplayer.media.MediaElement;
			import org.openvideoplayer.net.NetLoader;
			import org.openvideoplayer.media.URLResource;
			import org.openvideoplayer.video.VideoElement;
			

			import mx.core.Application;
			import mx.events.FlexEvent;
			
			
			
			//private static const REMOTE_PROGRESSIVE:String 		= "http://vs1.rz.uos.de/public/virtmm/test/Pechakucha-zoo_hd.mp4";
			//private static const REMOTE_STREAM:String 		  	= "rtmp://freecom.serv.uni-osnabrueck.de/oflaDemo/femaf09_2009_4_17_10_18.flv";
			
			//private static const CAPTION_URL:String			= 'http://localhost/opencast-engage-player/dfxp/car.dfxp.xml';
			//private static const DFXPFLVEXAMPLE:String		= 'http://vs1.rz.uni-osnabrueck.de/public/virtmm/opencast/car.flv';
			
			//private static const DFXPFLVEXAMPLE:String		= 'http://localhost/opencast-engage-player/dfxp/schnee.flv';
			
			
			[Autowire]
			[Bindable]
			public var model:VideodisplayModel;
			
			private var t:TimeCode;
			 
			private var videoURL:String;
			
			private var captionURL:String;
			
			private var media:VideoElement;
			
			private var autoplay:Boolean = false;
			
  			private const TIMER_INTERVAL_BYTES_LOADED:int = 200;

  			private var bytesLodedTimer:Timer;        
			
			/**  */
			protected function initPlayer():void
			{
				model.player = this.wrapper;
				t = new TimeCode();
				
				bytesLodedTimer = new Timer(TIMER_INTERVAL_BYTES_LOADED);    
				bytesLodedTimer.addEventListener(TimerEvent.TIMER, progress);
				bytesLodedTimer.start();
				
				
				if(Application.application.parameters.video_url != undefined)
					videoURL = Application.application.parameters.video_url;
				//else
					//videoURL = DFXPFLVEXAMPLE;
				
		       	if(Application.application.parameters.captions != undefined)
		      		captionURL = Application.application.parameters.captions;
		      	//else
		      		//captionURL = CAPTION_URL;
		      	
		      	if(Application.application.parameters.autoplay != undefined)
          			autoplay = (Application.application.parameters.autoplay == "true");
	          	
		      	if( captionURL != null )
		      	{
		      		// Load the DFXP	
		      		Swiz.dispatchEvent( new LoadDFXPXMLEvent( captionURL ) );
		      	}
				
				// Create the new media.
				media = new VideoElement(new NetLoader(), new URLResource(videoURL));
				
				// Listen for events related to the new media.
				toggleMediaListeners(media, true);
				
				wrapper.element = media;
				wrapper.scaleMode = ScaleMode.LETTERBOX;
				wrapper.addEventListener(DimensionChangeEvent.DIMENSION_CHANGE, dimChange);	
				wrapper.addEventListener(PlayheadChangeEvent.PLAYHEAD_CHANGE, playHeadChange);
				wrapper.addEventListener(DurationChangeEvent.DURATION_CHANGE, durationChange);		
				wrapper.addEventListener(VolumeChangeEvent.VOLUME_CHANGE, volumeChange );
			}
			
			/**  */
			private function autoPlayOff(event:PlayheadChangeEvent):void
			{
			    Swiz.dispatchEvent( new VideoControlEvent(VideoControlEvent.STOP));
  			  	wrapper.removeEventListener(PlayheadChangeEvent.PLAYHEAD_CHANGE, autoPlayOff);
          		model.player.volume = 1.0;
          		wrapper.visible = true;
			}
			
			/**  */
			private function durationChange(event:DurationChangeEvent):void
			{	
				// Store new duration as current duration in the videodisplay model
				model.currentDuration = event.newDuration;
				currentDurationString = t.getTC(model.currentDuration);
				
				ExternalInterface.call(ExternalFunction.SETDURATION, event.newDuration);
		    	ExternalInterface.call(ExternalFunction.SETTOTALTIME, currentDurationString);
		    }
			
			/**  */
			private function dimChange(event:DimensionChangeEvent):void
			{	
				// 	debugDimensions.text = event.newWidth +" "+event.newHeight;
				//	ExternalInterface.call('setLog', "WidthxHeight: "+event.newWidth +"x"+event.newHeight);
			}
			
			/**  */
			private function progress(event:TimerEvent):void
			{
	        	var loadable:ILoadable = media.getTrait(MediaTraitType.LOADABLE) as ILoadable;
	          	if (loadable)
	          	{
	            	var context:NetLoadedContext = NetLoadedContext(loadable.loadedContext);
	            	try 
	            	{
	            		ExternalInterface.call(ExternalFunction.SETPROGRESS, context.stream.bytesLoaded / context.stream.bytesTotal * 100);
	            	} 
	            	catch (e:TypeError) {}
	          	}
	        }

			
			private var lastNewPositionString:String = "00:00:00";
			private var currentDurationString:String = "00:00:00";
			
			/**  */
			private function playHeadChange(event:PlayheadChangeEvent):void
			{	
				
				model.currentPlayhead = event.newPosition;
				
				var newPositionString:String = t.getTC(event.newPosition);
				
				if(newPositionString != lastNewPositionString)
				{
					ExternalInterface.call(ExternalFunction.SETCURRENTTIME, newPositionString);
					lastNewPositionString = newPositionString;
				}
				
				if(!model.player.seeking)
				  ExternalInterface.call(ExternalFunction.SETPLAYHEAD, event.newPosition);
				
				if( captionURL != null )
      			{
      				Swiz.dispatchEvent( new DisplayCaptionEvent( event.newPosition ) );
      			}
      			
      			// end of the video
      			if( currentDurationString == newPositionString  )
      			{
      				Swiz.dispatchEvent( new VideoControlEvent(VideoControlEvent.STOP));
      			}
			}
			
			/**  */
			private function toggleMediaListeners(media:MediaElement, on:Boolean):void
			{
				if (media != null)
				{
					var loadable:ILoadable = media.getTrait(MediaTraitType.LOADABLE) as ILoadable;
					if (loadable)
					{
						if (on)
							loadable.addEventListener(LoadableStateChangeEvent.LOADABLE_STATE_CHANGE, onLoadableStateChange);
						else
							loadable.removeEventListener(LoadableStateChangeEvent.LOADABLE_STATE_CHANGE, onLoadableStateChange);
					}
				}
			}
			
			/**  */
			private function onLoadableStateChange(event:LoadableStateChangeEvent):void
			{
				// debugLoadState.text = event.newState.toString();
	
				if (event.newState == LoadState.LOADED)
				{
					if(!autoplay)
			  	{
			    	model.player.volume = 0.0;
			    	wrapper.visible = false;
			    	wrapper.addEventListener(PlayheadChangeEvent.PLAYHEAD_CHANGE, autoPlayOff);
			  	}
				}
			}
			
			/**
			 * resizeVideodisplay
			 * 
			 * When the learner resize the Videodisplay in the Browser
			 * 
			 * */
			public function resizeVideodisplay():void
			{
				Swiz.dispatchEvent( new ResizeVideodisplayEvent() );
			}
			
			/**
			 * volumeChange
			 * 
			 * When the volume is change in the video
			 * 
			 * */
			private function volumeChange(event:VolumeChangeEvent):void
			{
				ExternalInterface.call(ExternalFunction.SETVOLUME, model.player.volume * 100);
			}
			
		]]>
	</mx:Script>
	<players:MediaPlayerWrapper id="wrapper"
		width="100%"
		height="100%"
		addedToStage="initPlayer()"/>
</mx:Canvas>