<?xml version="1.0" encoding="utf-8"?>

<!--
	 /**
	 *  Copyright 2009 The Regents of the University of California
	 *  Licensed under the Educational Community License, Version 2.0
	 *  (the "License"); you may not use this file except in compliance
	 *  with the License. You may obtain a copy of the License at
	 *
	 *  http://www.osedu.org/licenses/ECL-2.0
	 *
	 *  Unless required by applicable law or agreed to in writing,
	 *  software distributed under the License is distributed on an "AS IS"
	 *  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
	 *  or implied. See the License for the specific language governing
	 *  permissions and limitations under the License.
	 *
	 */
-->
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009"
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   xmlns:s="library://ns.adobe.com/flex/spark"
		   xmlns:view="org.opencast.engage.videodisplay.view.*"
		   backgroundAlpha="1.0" currentState="{model.currentPlayerState}"
		   horizontalScrollPolicy="off" verticalScrollPolicy="off">

	<fx:Script>
		<![CDATA[
			import bridge.ExternalFunction;
			
			
			import mx.core.Application;
			import mx.core.FlexGlobals;
			import mx.skins.halo.ApplicationBackground;
			import mx.core.IUIComponent;
			
			import org.opencast.engage.videodisplay.control.event.SetVolumeEvent;
			import org.opencast.engage.videodisplay.control.event.VideoControlEvent;
			import org.opencast.engage.videodisplay.model.VideodisplayModel;
			import org.opencast.engage.videodisplay.state.DefaultPlayerState;
			import org.opencast.engage.videodisplay.state.PlayerState;
			import org.opencast.engage.videodisplay.state.VideoSizeState;
			import org.opencast.engage.videodisplay.state.VideoState;
			import org.osmf.layout.VerticalAlign;
			import org.osmf.media.MediaPlayer;
			import org.swizframework.Swiz;

			[Autowire]
			[Bindable]
			public var model:VideodisplayModel;

			private var startMultiPlayer:Boolean=false;

			/**
			 * fullscreen
			 * Toggle between normal and fullscreen mode.
			 * Set also the new height and width for the videos.
			 */
			private function fullscreen():void
			{
				FlexGlobals.topLevelApplication.stage.displayState=StageDisplayState.FULL_SCREEN;

				model.fullscreenMode=true;

				model.multiMediaContainerLeftNormalscreen=model.multiMediaContainerLeft;
				model.multiMediaContainerRightNormalscreen=model.multiMediaContainerRight;

				var flashWidth:int=FlexGlobals.topLevelApplication.width - 10;
				var flashHeight:int=FlexGlobals.topLevelApplication.height - 10;
				var newMediaOneHeight:Number=0;
				var newMediaOneWidth:Number=0;
				var newMediaTwoHeight:Number=0;
				var newMediaTwoWidth:Number=0;
				var percentOne:Number=0;
				var percentTwo:Number=0;

				if (model.videoSizeState == VideoSizeState.ONLYLEFT)
				{
					newMediaOneHeight=flashHeight * model.formatMediaOne;
					model.multiMediaContainerRight=(flashWidth - newMediaOneHeight) / 2;
					model.multiMediaContainerLeft=0;
				}
				else if (model.videoSizeState == VideoSizeState.ONLYRIGHT)
				{
					newMediaTwoHeight=flashHeight * model.formatMediaTwo;
					model.multiMediaContainerLeft=(flashWidth - newMediaTwoHeight) / 2;
					model.multiMediaContainerRight=0;
				}
				else if (model.videoSizeState == VideoSizeState.BIGLEFT)
				{
					percentOne=66.66666666666;
					newMediaOneWidth=flashWidth * (percentOne / 100);
					newMediaOneHeight=newMediaOneWidth / model.formatMediaOne;
					model.multiMediaContainerBottom=(flashHeight - newMediaOneHeight) / 2;
					model.multiMediaContainerLeft=0;
					model.multiMediaContainerRight=0;
				}
				else if (model.videoSizeState == VideoSizeState.BIGRIGHT)
				{
					percentTwo=66.66666666666;
					newMediaTwoWidth=flashWidth * (percentTwo / 100);
					newMediaTwoHeight=newMediaTwoWidth / model.formatMediaTwo;
					model.multiMediaContainerBottom=(flashHeight - newMediaTwoHeight) / 2;
					model.multiMediaContainerLeft=0;
					model.multiMediaContainerRight=0;
				}
				else if (model.videoSizeState == VideoSizeState.CENTER)
				{
					var newHeight:Number=0;
					percentOne=50;
					percentTwo=50;
					newMediaOneWidth=flashWidth * (percentOne / 100);
					newMediaOneHeight=newMediaOneWidth / model.formatMediaOne;
					newMediaTwoWidth=flashWidth * (percentTwo / 100);
					newMediaTwoHeight=newMediaTwoWidth / model.formatMediaTwo;

					if (newMediaOneHeight > newMediaTwoHeight)
					{
						newHeight=newMediaOneHeight;
					}
					else
					{
						newHeight=newMediaTwoHeight;
					}

					model.multiMediaContainerBottom=(flashHeight - newHeight) / 2;
					model.multiMediaContainerLeft=0;
					model.multiMediaContainerRight=0;
				}
			}

			/**
			 * hideButton
			 * Hide the splash button in the centre of the stage
			 */
			private function hideButton():void
			{
				if (this.currentState == PlayerState.PLAYING)
				{
					pauseButton_up.visible=false;
					fullscreen_btn.alpha=0;
				}
				else
				{
					if (model.videoState != VideoState.COVER)
					{
						playButton_up.visible=false;
						fullscreen_btn.alpha=0;
					}
				}
			}

			/**
			 * showButton
			 * Show the splash button in the centre of the stage
			 */
			private function showButton():void
			{
				if (this.currentState == PlayerState.PLAYING)
				{
					pauseButton_up.visible=true;
					//fullscreen_btn.visible=true;
				}
				else
				{
					playButton_up.visible=true;
					//fullscreen_btn.visible=true;
				}
			}
			
			/**
			 * hideButton fullscreen
			 */
			private function hideButton_fullscreen():void
			{
					fullscreen_btn.alpha=0;
			}
			
			/**
			 * showButton fullscreen
			 */
			private function showButton_fullscreen():void
			{
					fullscreen_btn.alpha=1;
			}
			
			/**
			 * play
			 * Play the media file by calling the html
			 */
			private function play():void
			{
				if (model.startPlaySingle == true)
				{
					ExternalInterface.call(ExternalFunction.PLAYPAUSE, '');
				}
					/*else if (model.startPlayOne == true && model.startPlayTwo == true)
					{
					ExternalInterface.call(ExternalFunction.PLAYPAUSE, '');
					}*/
				else if (model.startPlayOne == true)
				{
					ExternalInterface.call(ExternalFunction.PLAYPAUSE, '');
				}
			}
			
			
		]]>
	</fx:Script>
<!--23.02.2012
	<mx:states>
		<mx:State name="{PlayerState.PLAYING}">
			<mx:SetProperty name="visible" target="{playButton_up}" value="false"/>
			<mx:SetProperty name="visible" target="{pauseButton_up}" value="false"/>
		</mx:State>
		<mx:State name="{PlayerState.PAUSED}">
			<mx:SetProperty name="visible" target="{playButton_up}" value="true"/>
			<mx:SetProperty name="visible" target="{pauseButton_up}" value="false"/>
		</mx:State>
	</mx:states>
	-->
	
	<mx:states>
		<s:State name="playing"></s:State>
		<s:State name="paused"></s:State>
	</mx:states>

	<mx:transitions>

		<mx:Transition id="fadeOut" fromState="{PlayerState.PLAYING}" toState="{PlayerState.PAUSED}">
			<mx:Parallel target="{curtain}"/>
		</mx:Transition>

		<mx:Transition id="fadeIn" fromState="{PlayerState.PAUSED}" toState="{PlayerState.PLAYING}">
			<mx:Parallel target="{curtain}"/>
		</mx:Transition>
	</mx:transitions>
	
		
	<mx:Canvas id="curtain" width="60" height="60" backgroundAlpha="0" backgroundColor="#000000"
			   horizontalCenter="0" horizontalScrollPolicy="off" rollOut="{ hideButton(); }"
			   rollOver="{ showButton(); }" verticalCenter="0" verticalScrollPolicy="off"/>

	<mx:Button id="playButton_up" visible="false" width="{this.width/10}"
			   height="{playButton_up.width}" buttonMode="true"
			   click="{ ExternalInterface.call( ExternalFunction.PLAYPAUSE, '' ) }"
			   horizontalCenter="0" rollOut="{ hideButton(); }" rollOver="{ showButton(); }"
			   styleName="PlayBig" toolTip="Play" verticalCenter="0"
			   visible.paused="true"
			   visible.playing="false"/>

	<mx:Button id="pauseButton_up" visible="false" width="{this.width/10}"
			   height="{pauseButton_up.width}" buttonMode="true"
			   click="{ ExternalInterface.call( ExternalFunction.PLAYPAUSE, '' ) }"
			   horizontalCenter="0" rollOut="{ hideButton(); }" rollOver="{ showButton(); }"
			   styleName="PauseBig" toolTip="Pause" verticalCenter="0"
			   visible.paused="false"
			   visible.playing="false"/>

	<mx:VBox width="100%" height="100%">

		<mx:HBox width="100%" horizontalAlign="right">

			<!--<mx:Button visible="{!model.fullscreenMode}" click="{ fullscreen() }"
					   includeInLayout="{!model.fullscreenMode}" styleName="btnfullscreen"
					   toolTip="Fullscreen" />-->
			<mx:Button id="fullscreen_btn" visible="true" width="30" height="30" buttonMode="true"
					   click="{ fullscreen() }"
					   icon="@Embed(source='../../../../../style/fullscreen.png')"
					   rollOut="hideButton_fullscreen()" rollOver="showButton_fullscreen()"
					   skin="{null}" toolTip="Fullscreen mode"/>
		</mx:HBox>

		<mx:Spacer height="100%"/>

		<mx:VBox width="100%" horizontalScrollPolicy="off" verticalGap="0" verticalScrollPolicy="off">

			<view:CaptionsView id="captionsView" bottom="5" width="100%" horizontalAlign="center"/>

			<!--<view:FullscreenVideoControlsView id="fullscreenVideoControlsView"
											  visible="{model.fullscreenMode}" width="100%"
											  height="100%" includeInLayout="{model.fullscreenMode}"/>-->
			<view:FullscreenControls id="fullscreenVideoControlsView"
									 visible="{model.fullscreenMode}"
									 includeInLayout="{model.fullscreenMode}"
									 bottom="15" horizontalAlign="center" width="100%"
									/>
		</mx:VBox>
	</mx:VBox>

	<mx:HBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">

		<mx:SWFLoader visible="{ model.loader }" autoLoad="true" includeInLayout="{ model.loader }"
					  scaleContent="true"
					  source="@Embed(source='../../../../../style/oc_logo_loader.swf')"/>
	</mx:HBox>
</mx:Canvas>
