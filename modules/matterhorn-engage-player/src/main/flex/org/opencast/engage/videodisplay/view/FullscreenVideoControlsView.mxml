<?xml version = "1.0" encoding = "utf-8"?>

<!--
     /**
     *  Copyright 2009 The Regents of the University of California
     *  Licensed under the Educational Community License, Version 2.0
     *  (the "License"); you may not use this file except in compliance
     *  with the License. You may obtain a copy of the License at
     *
     *  http://www.osedu.org/licenses/ECL-2.0
     *
     *  Unless required by applicable law or agreed to in writing,
     *  software distributed under the License is distributed on an "AS IS"
     *  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
     *  or implied. See the License for the specific language governing
     *  permissions and limitations under the License.
     *
     */
-->
<mx:VBox 
    xmlns:mx = "http://www.adobe.com/2006/mxml"
    xmlns:view = "org.opencast.engage.videodisplay.view.*"
    horizontalAlign = "center"
    horizontalGap = "0"
    verticalGap = "0"
    width = "70%"
    height = "100%"
    backgroundColor = "0x000000"
    backgroundAlpha = "0.0"
    rollOver = "{this.NavigationVisible = true}"
    rollOut = "{this.NavigationVisible = false}"
    mouseOver = "{this.NavigationVisible = true}"
    creationComplete = "startTimer();">

    <mx:Script>
        <![CDATA[
            import org.opencast.engage.videodisplay.state.SoundState;
            import org.osmf.layout.VerticalAlign;
            import org.opencast.engage.videodisplay.control.event.ClosedCaptionsEvent;
            import bridge.ExternalFunction;
            import org.opencast.engage.videodisplay.state.PlayerState;
            import org.opencast.engage.videodisplay.control.event.VideoControlEvent;
            import org.swizframework.Swiz;
            import org.opencast.engage.videodisplay.model.VideodisplayModel;
            import mx.core.Application;
            import mx.controls.Alert;
            import flash.external.ExternalInterface;

            [Autowire]
            [Bindable]
            public var model : VideodisplayModel;

            [Bindable]
            private var NavigationVisible : Boolean = true;

            [Bindable]
            private var mouseUpBool : Boolean = false;

            [Bindable]
            private var mouseDownBool : Boolean = false;

            [Bindable]
            private var controlsVisible : Boolean = false;

            private var startDragValue : Number = 0;

            private var rewindTimer : Timer = new Timer( 400, 1 );

            private var fastForwardTimer : Timer = new Timer( 400, 1 );

            [Bindable]
            private var mute : Boolean = false;


            /**
             * startTimer
             * Starts a timer to hide the navigation elements.
             */
            private function startTimer() : void
            {
                var timer : Timer = new Timer( 1000, 8 );
                timer.addEventListener( TimerEvent.TIMER_COMPLETE, onTimerComplete );
                timer.start();
            }

            /**
             * onTimerComplete
             * When the timer ist complete and the controlVisible ist false, the navigation ist unvisible.
             * @eventType event:TimerEvent
             */
            public function onTimerComplete( event : TimerEvent ) : void
            {
                if( controlsVisible == false )
                {
                    this.NavigationVisible = false;
                }
            }

            /**
             * normalscreen
             * Set the flash into the normal modus.
             */
            private function normalscreen() : void
            {
                Application.application.stage.displayState = StageDisplayState.NORMAL;
            }

            /**
             * onSeek
             * When the seek slider is moving, update video to new seek slider position.
             */
            private function onSeek() : void
            {
                if( model.fullscreenMode == true )
                {
                    var t : Number = hs_seek.value * 100 / model.currentDuration;

                    if( model.progress < t && model.mediaType == model.HTML )
                    {
                        model.currentPlayhead = startDragValue;
                        hs_seek.value = startDragValue;
                    }
                    else
                    {
                        startDragValue = hs_seek.value;
                    }

                    if( model.startPlay == false )
                    {
                        model.startSeek = hs_seek.value;
                    }
                    model.mediaPlayer.seek( hs_seek.value );
                    model.currentPlayhead = hs_seek.value;
                }
            }

            /**
             * seekDataTipFunc
             * Generate the string for the tool tip of the Seek Slider.
             * @param String val
             * @return String value
             */
            private function seekDataTipFunc( val : String ) : String
            {
                var value : int = int( val );
                return model.timeCode.getTC( value );
            }

            /**
             * toggleMute
             * Call external function MUTE, toggle between mute and unmute the video.
             */
            private function toggleMute() : void
            {
                ExternalInterface.call( ExternalFunction.MUTE, '' );

                if( mute == false )
                {
                    mute = true;
                }
                else
                {
                    mute = false;
                }
            }

            /**
             * changeVolume
             * When the volume slider is moving, update the sound of the video to new volume slider position.
             * Call external function SETVOLUMESLIDER, update the html volume slider.
             */
            private function changeVolume() : void
            {
                model.mediaPlayer.setVolume( hs_volume.value );
                ExternalInterface.call( ExternalFunction.SETVOLUMESLIDER, Math.round( 100 * hs_volume.value ) );
            }

            /**
             * volumeDataTipFunc
             * Generate the string for the tool tip of the volume slider.
             * @param String val
             * @return String value
             */
            private function volumeDataTipFunc( val : String ) : String
            {
                var vol : Number = new Number( val );
                var value : String = '';

                if( vol * 100 < 1 )
                {
                    vol = 0;
                    value = 'Volume 0 %';
                    return value;
                }
                value = 'Volume ' + ( vol * 100 ).toFixed( 0 ) + ' %';

                return value;
            }

            /**
             * jumpForward
             * Jump forward in the video.
             */
            private function jumpForward() : void
            {
                if( !fastForwardTimer.running )
                {
                    if( !model.mediaPlayer.seeking() )
                    {
                        if( model.currentPlayhead + model.fastForwardTime >= model.currentDuration )
                        {
                            model.mediaPlayer.seek( model.currentDuration - 2 );
                        }
                        else
                        {
                            model.mediaPlayer.seek( model.currentPlayhead + model.fastForwardTime );
                        }

                    }
                    fastForwardTimer.addEventListener( TimerEvent.TIMER_COMPLETE, onFastForwardTimerComplete );
                    fastForwardTimer.start();
                }
            }

            /**
             * jumpBack
             * Jump back in the video
             * */
            private function jumpBack() : void
            {
                if( !rewindTimer.running )
                {
                    if( !model.mediaPlayer.seeking() )
                    {
                        if( model.currentPlayhead - model.rewindTime <= 0 )
                        {
                            model.mediaPlayer.seek( 0 );
                        }
                        else
                        {
                            model.mediaPlayer.seek( model.currentPlayhead - model.rewindTime );
                        }
                    }
                    rewindTimer.addEventListener( TimerEvent.TIMER_COMPLETE, onRewindTimerComplete );
                    rewindTimer.start();
                }
            }

            /**
             * onFastForwardTimerComplete
             * Stop the fast forward timer and jump forward in the video.
             * */
            private function onFastForwardTimerComplete( event : TimerEvent ) : void
            {
                fastForwardTimer.stop();
                jumpForward();
            }

            /**
             * onRewindTimerComplete
             * Stop the rewind timer and jump back in the video.
             * eventType TimerEvent event
             */
            private function onRewindTimerComplete( event : TimerEvent ) : void
            {
                rewindTimer.stop();
                jumpBack();
            }



            /**
             * thumbDrag
             * When the learner drag the seek slider.
             * */
            private function thumbDrag() : void
            {
                model.fullscreenThumbDrag = true;
                startDragValue = hs_seek.value;
            }
        ]]>
    </mx:Script>

    <mx:Fade 
        id = "fadeOut"
        duration = "400"
        alphaFrom = "1.0"
        alphaTo = "0.0"/>

    <mx:Fade 
        id = "fadeIn"
        duration = "200"
        alphaFrom = "0.0"
        alphaTo = "1.0"/>

    <mx:Canvas 
        width = "700"
        height = "80"
        visible = "{this.NavigationVisible}"
        hideEffect = "{fadeOut}"
        showEffect = "{fadeIn}"
        mouseOver = "{this.NavigationVisible = true; controlsVisible = true}">

        <mx:VBox 
            width = "100%"
            height = "80"
            horizontalAlign = "center"
            verticalAlign = "top"
            verticalGap = "0"
            horizontalGap = "0">

            <mx:HBox 
                width = "100%"
                height = "100%"
                horizontalAlign = "center"
                horizontalGap = "0"
                verticalGap = "0"
                verticalAlign = "bottom">

                <mx:HBox 
                    width = "166"
                    height = "48"
                    horizontalAlign = "center"
                    verticalAlign = "middle"
                    verticalGap = "0"
                    horizontalGap = "0"
                    styleName = "controlsBackground">

                    <mx:Label 
                        id = "lb_currentTime"
                        textAlign = "center"
                        text = "{ model.timeCode.getTC(model.currentPlayhead) }"
                        styleName = "videocontrollerLabel"
                        toolTip = "Current Time {model.timeCode.getTC(model.currentPlayhead) } "/>

                    <mx:Label 
                        textAlign = "center"
                        text = "of"
                        styleName = "videocontrollerLabel"/>

                    <mx:Label 
                        id = "lb_durationTime"
                        textAlign = "center"
                        text = "{ model.timeCode.getTC(model.currentDuration) }"
                        styleName = "videocontrollerLabel"
                        toolTip = "Duration {model.timeCode.getTC(model.currentDuration) } "/>
                </mx:HBox>

                <mx:HBox 
                    width = "220"
                    height = "48"
                    verticalGap = "0"
                    horizontalGap = "0"
                    horizontalAlign = "center"
                    verticalAlign = "middle"
                    styleName = "controlsBackground">

                    <mx:Button 
                        id = "btn_skipBackward"
                        toolTip = "Jump To The Previous Slide"
                        styleName = "SkipBackward"
                        click = "{ExternalInterface.call( ExternalFunction.SKIPBACKWARD, '' )}"/>

                    <mx:Button 
                        id = "btn_rewind"
                        toolTip = "Jump Back"
                        styleName = "Rewind"
                        mouseDown = "{ jumpBack() }"
                        mouseUp = "{ rewindTimer.stop(); }"/>

                    <mx:Button 
                        id = "btn_playpause"
                        toolTip = "{ model.currentPlayerState == PlayerState.PAUSED ? 'Play' : 'Pause' }"
                        styleName = "{ model.currentPlayerState == PlayerState.PAUSED ? 'Play' : 'Pause' }"
                        click = "{ ExternalInterface.call( ExternalFunction.PLAYPAUSE, '' ) }"/>

                    <mx:Button 
                        id = "btn_fastforward"
                        toolTip = "Jump Forward"
                        styleName = "FastForward"
                        mouseDown = "{ jumpForward() }"
                        mouseUp = "{ fastForwardTimer.stop() }"/>

                    <mx:Button 
                        id = "btn_skipforward"
                        toolTip = "Jump To The Next Slide"
                        styleName = "SkipForward"
                        click = "{ExternalInterface.call( ExternalFunction.SKIPFORWARD, '' )}"/>
                </mx:HBox>

                <mx:HBox 
                    verticalAlign = "middle"
                    horizontalCenter = "right">

                    <mx:Button 
                        id = "btn_volume"
                        toolTip = "{ model.soundState == SoundState.VOLUMEMAX ? 'Volume Maximum' : model.soundState == SoundState.VOLUMEMED ? 'Volume Medium' : model.soundState == SoundState.VOLUMEMIN ? 'Volume Minimum' : model.soundState == SoundState.VOLUMEMUTE ? 'Volume Mute' : ''}"
                        styleName = "{ model.soundState}"
                        click = "{ toggleMute() }"/>
                </mx:HBox>

                <mx:HBox 
                    width = "60"
                    height = "48"
                    verticalAlign = "middle"
                    horizontalCenter = "center"
                    styleName = "controlsBackground"
                    backgroundColor = "#231645">

                    <mx:HSlider 
                        id = "hs_volume"
                        width = "58"
                        maximum = "1"
                        change = "{ changeVolume() }"
                        value = "{ model.playerVolume }"
                        styleName = "HSliderVolume"
                        dataTipFormatFunction = "volumeDataTipFunc"/>
                </mx:HBox>

                <mx:Button 
                    width = "48"
                    height = "48"
                    toolTip = "{ model.captionsURL == '' ? 'No Closed Captons' : model.ccBoolean == true ? 'Closed Captons On' : 'Closed Captons Off' }"
                    styleName = "{ model.captionsURL == '' ? 'ccOff' : model.ccButtonBoolean == true ? 'ccActivate' :  mute == true ? 'ccActivate' :  'ccOn' }"
                    click = "{ Swiz.dispatchEvent( new ClosedCaptionsEvent() ) }"
                    enabled = "{  model.captionsURL == '' ? false : true }"/>

                <mx:Button 
                    width = "48"
                    height = "48"
                    toolTip = "Back To The Player"
                    styleName = "FullscreenOut"
                    click = "{ normalscreen() }"/>
            </mx:HBox>

            <mx:Canvas>

                <mx:Canvas 
                    height = "9"
                    width = "{model.progressFullscreen}"
                    backgroundColor = "#dfe938c"
                    toolTip = "Progress"
                    top = "6"
                    left = "7"/>

                <mx:Canvas>

                    <mx:HSlider 
                        id = "hs_seek"
                        width = "580"
                        maximum = "{ model.currentDuration }"
                        value = "{ model.currentPlayhead }"
                        change = "{ onSeek() }"
                        toolTip = "Current Time {model.timeCode.getTC(model.currentPlayhead) } "
                        dataTipFormatFunction = "seekDataTipFunc"
                        styleName = "HSliderSeek"
                        thumbDrag = "{ thumbDrag() }"
                        thumbRelease = "{ model.fullscreenThumbDrag = false }"
                        left = "0"/>
                </mx:Canvas>
            </mx:Canvas>
        </mx:VBox>
    </mx:Canvas>
</mx:VBox>
