<?xml version = "1.0" encoding = "utf-8"?>
<!--
     /**
     *  Copyright 2009 The Regents of the University of California
     *  Licensed under the Educational Community License, Version 2.0
     *  (the "License"); you may not use this file except in compliance
     *  with the License. You may obtain a copy of the License at
     *
     *  http://www.osedu.org/licenses/ECL-2.0
     *
     *  Unless required by applicable law or agreed to in writing,
     *  software distributed under the License is distributed on an "AS IS"
     *  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
     *  or implied. See the License for the specific language governing
     *  permissions and limitations under the License.
     *
     */
-->
<mx:VBox 
    xmlns:mx = "http://www.adobe.com/2006/mxml"
    xmlns:view = "org.opencast.engage.videodisplay.view.*"
    horizontalAlign="center"
    horizontalGap="0"
    verticalGap="0"
    width="70%"
    height="100%"
    backgroundColor="0x000000"
    backgroundAlpha="0.0"
    rollOver="{this.NavigationVisible = true}"
    rollOut="{this.NavigationVisible = false}"
    mouseOver="{this.NavigationVisible = true}"
    creationComplete="startTimer();"
    >

    <mx:Script>
        <![CDATA[
        	import org.opencast.engage.videodisplay.state.SoundState;
        	import org.osmf.layout.VerticalAlign;
        	import org.opencast.engage.videodisplay.control.event.ClosedCaptionsEvent;
            import bridge.ExternalFunction;
            import org.opencast.engage.videodisplay.state.PlayerState;
            import org.opencast.engage.videodisplay.control.event.VideoControlEvent;
            import org.swizframework.Swiz;
            import org.opencast.engage.videodisplay.model.VideodisplayModel;
            import mx.core.Application;
            import mx.controls.Alert;
            import flash.external.ExternalInterface;

            [Autowire]
            [Bindable]
            public var model:VideodisplayModel;
            
            [Bindable]
            private var NavigationVisible:Boolean = true;
            [Bindable]
            private var mouseUpBool:Boolean = false;
            [Bindable]
            private var mouseDownBool: Boolean = false;
            [Bindable]
            private var controlsVisible: Boolean = false;
            
            private var startDragValue:Number = 0;
            
            private var seekTimer:Timer;
           

             /**
             * starts a timer to hide the navigation elements
             *
             **/
            private function startTimer():void
            {
                // creates a Timer
                var timer:Timer = new Timer(1000, 8);
                timer.addEventListener(TimerEvent.TIMER_COMPLETE, onTimerComplete);
                timer.start();
                
                // initialize the seekTimer
                seekTimer = new Timer(0);
            }
            
            public function onTimerComplete(event:TimerEvent):void
       		{
            	if(controlsVisible == false)
            	{
            	   this.NavigationVisible = false;
            	}
       		}
            
            /**
             * normalscreen
             *
             * Toggle between normal screen and full screen mode
             *
             **/
            private function normalscreen():void
            {
                Application.application.stage.displayState = StageDisplayState.NORMAL;
            }
            
            /**
             * onSeek
             *
             * Seek the video
             *
             * */
            private function onSeek():void
            {
                if( model.fullscreenMode == true  )
                {
	                var t:Number = hs_seek.value * 100 / model.currentDuration;
	                
	                if( model.progress < t && model.mediaType == model.HTML)
	                {
	                    model.currentPlayhead = startDragValue;
	                    hs_seek.value = startDragValue;
	                }
	                else
	                {
	                    startDragValue = hs_seek.value;
	                }
	                
	                if( model.startPlay == false )
	                {
	                    model.startSeek = hs_seek.value;
	                }
	                model.mediaPlayer.seek(hs_seek.value);
	                model.currentPlayhead = hs_seek.value;
	            }
            }
            
            /**
             * seekDataTipFunc
             *
             * Generate the string for the tool tip of the Seek Slider.
             *
             * */
            private function seekDataTipFunc( val:String ):String
            {
                var value:int = int( val );
                return model.timeCode.getTC( value );
            }
            
            /**
             * toggleMute
             *
             * Toggle between mute or unmute
             *
             * */
            private function toggleMute():void
            {
                ExternalInterface.call( ExternalFunction.MUTE, '' );
            }
            
            /**
             * changeVolume
             *
             * Change the volume of the video
             *
             * */
            private function changeVolume():void
            {
               model.mediaPlayer.setVolume( hs_volume.value );
            }
            
            /**
             * volumeDataTipFunc
             *
             * Generate the string for the tool tip of the Seek Slider.
             *
             * */
            private function volumeDataTipFunc( val:String ):String
            {
                var vol:Number = new Number( val );
                
                if(vol * 100 < 1  )
                {
                    vol = 0;
                    return 'Volume 0 %'
                }
                
                return 'Volume '+( vol * 100 ).toFixed( 0 ) + ' %';
            }
            
            /**
             * jumpForward
             *
             * Jump forward in the video
             *
             * */
            private function jumpForward():void
            {
                if( !seekTimer.running )
                {
	                if( !model.mediaPlayer.seeking() )
	                {
	                    if( model.currentPlayhead + model.fastForwardTime >= model.currentDuration )
		                {
		                     model.mediaPlayer.seek( model.currentDuration - 2 );
		                }
		                else
		                {
		                   model.mediaPlayer.seek( model.currentPlayhead + model.fastForwardTime );
		                }
	                
	                }
	                seekTimer = new Timer(400,1);
	                seekTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onSeekTimerComplete);
	                seekTimer.start();
                }
            }
            
            /**
             * jumpBack
             *
             * Jump back in the video
             *
             * */
            private function jumpBack():void
            {
                if( !seekTimer.running )
                {
	               if( !model.mediaPlayer.seeking() )
	               {
	                  if( model.currentPlayhead - model.rewindTime <= 0 )
		              {
		                  model.mediaPlayer.seek( 0 );
		              }
		              else
		              {
		                  model.mediaPlayer.seek( model.currentPlayhead - model.rewindTime );
		              }
	               }
	               seekTimer = new Timer(400,1);
                   seekTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onSeekTimerComplete);
                   seekTimer.start();
                }
            }
            
            /**
             * onSeekTimerComplete
             *
             * Stop the seek timer.
             *
             * */
            private function onSeekTimerComplete():void
            {
                seekTimer.stop();
            }
            
            /**
             * thumbDrag
             *
             * When the learner drag the seek slider.
             *
             * */
            private function thumbDrag():void
            {
            	model.fullscreenThumbDrag = true;
            	startDragValue = hs_seek.value;
            }
            
           
        ]]>
    </mx:Script>
    
    <mx:Fade id="fadeOut" duration="400" alphaFrom="1.0" alphaTo="0.0"/>
    <mx:Fade id="fadeIn" duration="200" alphaFrom="0.0" alphaTo="1.0"/>
    
    <mx:Canvas
    	width = "700"
        height = "85"
        visible="{this.NavigationVisible}"
        hideEffect="{fadeOut}"
        showEffect="{fadeIn}"
        mouseOver="{this.NavigationVisible = true; controlsVisible = true}"
        >
    	
    	<mx:VBox 
            width = "100%"
            height = "85"
            horizontalAlign="center"
    		verticalAlign="top" 
    		verticalGap="0"
    		horizontalGap="0"
    		>
    
		    <mx:HBox
		    	width = "100%"
		        height = "100%"
		    	horizontalAlign="center"
		        horizontalGap="0"
		        verticalGap="0"
		        verticalAlign="bottom"
		    	>
		    	
		    	<mx:HBox
	        		width="166"
	        		height="48"
	        		horizontalAlign="center"
	        		verticalAlign="middle"
	        		verticalGap="0"
	        		horizontalGap="0"
	        		styleName="controlsBackground"
	        		>
	        		
	        		<mx:Label 
			            id = "lb_currentTime"
			            textAlign = "center"
			            text = "{ model.timeCode.getTC(model.currentPlayhead) }"
			            styleName = "videocontrollerLabel"
			            toolTip = "Current Time {model.timeCode.getTC(model.currentPlayhead) } "
			            />
			
			        <mx:Label 
			            textAlign = "center"
			            text = "of"
			            styleName = "videocontrollerLabel"
			            />
			
			        <mx:Label 
			            id = "lb_durationTime"
			            textAlign = "center"
			            text = "{ model.timeCode.getTC(model.currentDuration) }"
			            styleName = "videocontrollerLabel"
			            toolTip = "Duration {model.timeCode.getTC(model.currentDuration) } "
			            />
	        		
	            </mx:HBox>
		            
		        <mx:HBox
	                width="220"
                    height="48"
                    verticalGap="0"
                    horizontalGap="0"
	                horizontalAlign="center"
	                verticalAlign="middle"
	                styleName="controlsBackground"
	                >
	                
	               <mx:Button 
	               	    id="btn_skipBackward"
	               	    toolTip = "Jump To The Back Slide"
	                    styleName = "SkipBackward"
	                    click="{ExternalInterface.call( ExternalFunction.SKIPBACKWARD, '' )}"
	                    />
	                    
	               <mx:Button 
	               	    id="btn_rewind"
	               	    toolTip = "Jump Back"
	                    styleName = "Rewind"
	                    click="{ jumpBack() }"
	                    />
	                
	               <mx:Button 
	               	    id="btn_playpause"
	               	    toolTip = "{ model.currentPlayerState == PlayerState.PAUSED ? 'Play' : 'Pause' }"
	                    styleName = "{ model.currentPlayerState == PlayerState.PAUSED ? 'Play' : 'Pause' }"
	                    click = "{ ExternalInterface.call( ExternalFunction.PLAYPAUSE, '' ) }"
	                    />
	                    
	               <mx:Button 
	               	    id="btn_fastforward"
	               	    toolTip = "Jump Forward"
	                    styleName = "FastForward"
	                    click="{ jumpForward() }"
	                    />
	               
	               <mx:Button 
	               	    id="btn_skipforward"
	               	    toolTip = "Jump To The Next Slide"
	                    styleName = "SkipForward"
	                    click="{ExternalInterface.call( ExternalFunction.SKIPFORWARD, '' )}"
	                    />
	                    
	            </mx:HBox>
		            
                <mx:HBox
	                verticalAlign="middle"
	                horizontalCenter="right"
	                >
	                
	               <mx:Button 
	               	    id="btn_volume"
                        toolTip = "{ model.soundState == SoundState.VOLUMEMAX ? 'Volume Maximum' : model.soundState == SoundState.VOLUMEMED ? 'Volume Medium' : model.soundState == SoundState.VOLUMEMIN ? 'Volume Minimum' : model.soundState == SoundState.VOLUMEMUTE ? 'Volume Mute' : ''}"
	                    styleName = "{ model.soundState}"
	                    click = "{ toggleMute() }"
	                    />
	                    
                </mx:HBox>
	               
	            <mx:HBox
                    width="60"
                    height="48"
                    verticalAlign="middle"
                    horizontalCenter="center"
                    styleName="controlsBackground"
                    >
	               <mx:HSlider 
	               	    id = "hs_volume"
	                    width = "58"
	                    maximum = "1"
	                    change = "{ changeVolume() }"
	                    value = "{ model.playerVolume }"
	                    styleName = "HSliderVolume"
	                    dataTipFormatFunction = "volumeDataTipFunc"
	                    
	                    />
	            </mx:HBox>   
		            
		        <mx:Button 
		        	width="48"
		        	height="48"
					toolTip = "{ model.captionsURL == '' ? 'No Closed Captons' : model.ccBoolean == true ? 'Closed Captons On' : 'Closed Captons Off' }"
					styleName = "{ model.captionsURL == '' ? 'ccOff' : 'ccOn' }"
					click="{ Swiz.dispatchEvent( new ClosedCaptionsEvent() ) }"
					enabled="{  model.captionsURL == '' ? false : true }"
					/>
					
		        <mx:Button 
		        	width="48"
                    height="48"
					toolTip = "Back To The Player"
					styleName = "FullscreenOut"
					click="{ normalscreen() }"
					/>
		    
		    </mx:HBox>
		    
		    <mx:Canvas
		    	>
		    	
		    	<mx:Canvas 
                    height="9"
                    width = "{model.progressFullscreen}"
                    backgroundColor="#dfe938c"
                    toolTip="Progress"
                    top="6"
                    left="7"
                    />
                    
                <mx:Canvas>
	    	
	    		    <mx:HSlider 
		                id = "hs_seek"
		                width = "580"
		                maximum = "{ model.currentDuration }"
		                value = "{ model.currentPlayhead }"
		                change = "{ onSeek() }"
		                toolTip = "Current Time {model.timeCode.getTC(model.currentPlayhead) } "
		                dataTipFormatFunction = "seekDataTipFunc"
		                styleName = "HSliderSeek"
		                thumbDrag="{ thumbDrag() }"
		                thumbRelease="{ model.fullscreenThumbDrag = false }"
		                left="0"
		                />
            
                </mx:Canvas>
		    		
		    </mx:Canvas>
		    
		 </mx:VBox>
          
    </mx:Canvas>
    
</mx:VBox>
