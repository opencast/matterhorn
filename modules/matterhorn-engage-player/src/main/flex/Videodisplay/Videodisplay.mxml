<?xml version = "1.0" encoding = "utf-8"?>
<!--
     /**
     *  Copyright 2009 The Regents of the University of California
     *  Licensed under the Educational Community License, Version 2.0
     *  (the "License"); you may not use this file except in compliance
     *  with the License. You may obtain a copy of the License at
     *
     *  http://www.osedu.org/licenses/ECL-2.0
     *
     *  Unless required by applicable law or agreed to in writing,
     *  software distributed under the License is distributed on an "AS IS"
     *  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
     *  or implied. See the License for the specific language governing
     *  permissions and limitations under the License.
     *
     */
-->
<mx:Application 
    xmlns:mx = "http://www.adobe.com/2006/mxml"
    width = "100%"
    height = "100%"
    layout = "absolute"
    backgroundColor = "#000000"
    preinitialize = "{ onPreinitialize(); }"
    applicationComplete = "{ onApplicationComplete(event) }"
    addedToStage = "onAddedToStage()"
    xmlns:view = "org.opencast.engage.videodisplay.view.*"
    xmlns:br = "bridge.*"
    currentState = "{model.mediaState}"
    verticalScrollPolicy = "off"
    horizontalScrollPolicy = "off"
    xmlns:business = "org.opencast.engage.videodisplay.business.*"
    frameRate = "30"
    backgroundGradientColors="[#666666, #000000]"
    >

    <mx:Style 
        source = "style/standard_videodisplay.css"
        />

    <mx:Script>
        <![CDATA[
        	import org.opencast.engage.videodisplay.business.FlexAjaxBridge;
            import bridge.ExternalFunction;
            import org.opencast.engage.videodisplay.control.event.LoadDFXPXMLEvent;
            import org.opencast.engage.videodisplay.control.util.TimeCode;
            import org.opencast.engage.videodisplay.control.event.ClosedCaptionsEvent;
            import org.opencast.engage.videodisplay.control.event.SetCurrentCaptionsEvent;
            import mx.collections.ArrayCollection;
            import org.opencast.engage.videodisplay.vo.CaptionSetVO;
            import mx.controls.Alert;
            import org.opencast.engage.videodisplay.control.event.SetVolumeEvent;
            import org.opencast.engage.videodisplay.control.event.VideoControlEvent;
            import org.opencast.engage.videodisplay.model.VideodisplayModel;
            import org.opencast.engage.videodisplay.business.VideodisplayBean;
            import org.swizframework.Swiz;
            import flash.display.StageDisplayState;

            [Autowire]
            [Bindable]
            public var model:VideodisplayModel;

            /**
             * init
             *
             * initialization
             * */
            private function onApplicationComplete( evt:Event ):void
            {
                /* Set up full screen handler. */
                Application.application.stage.addEventListener( FullScreenEvent.FULL_SCREEN, fullScreenHandler );
            }

            /**
             * fullScreenHandler
             *
             * Save the status of the fullscreen mode
             * */
            private function fullScreenHandler( evt:FullScreenEvent ):void
            {
                if ( evt.fullScreen )
                {
                    model.fullscreenMode = true;
                }
                else
                {
                    model.fullscreenMode = false;
                }
            }

            /**
             * onPreinitialize
             *
             * load Beans
             * */
            private function onPreinitialize():void
            {
                Swiz.getInstance().loadBeans( [   VideodisplayBean   ] );
                Swiz.autowire( this );
            }

            /**
             * onAddedToStage
             *
             * Add an event listener for the keyboard.
             * */
            private function onAddedToStage():void
            {
            	flexAjaxBridge = new FlexAjaxBridge();
                stage.addEventListener( KeyboardEvent.KEY_UP, reportKeyUp );
            }

            private function reportKeyUp( event:KeyboardEvent ):void
            {
                flexAjaxBridge.reportKeyUp( event );
            }

            private var flexAjaxBridge:FlexAjaxBridge;
            
            public function getFlexAjaxBridge():FlexAjaxBridge
            {
                return this.flexAjaxBridge;
            }
        ]]>
    </mx:Script>

    <mx:states>

        <mx:State 
            name = "media"
            >

            <mx:SetProperty 
                target = "{ bx_media }"
                name = "visible"
                value = "true"
                />

            <mx:SetProperty 
                target = "{ bx_media }"
                name = "includeInLayout"
                value = "true"
                />
        </mx:State>

        <mx:State 
            name = "audio"
            >

            <mx:SetProperty 
                target = "{ bx_audio }"
                name = "visible"
                value = "true"
                />

            <mx:SetProperty 
                target = "{ bx_audio }"
                name = "includeInLayout"
                value = "true"
                />
        </mx:State>

        <mx:State 
            name = "error"
            >

            <mx:SetProperty 
                target = "{ bx_error }"
                name = "visible"
                value = "true"
                />

            <mx:SetProperty 
                target = "{ bx_error }"
                name = "includeInLayout"
                value = "true"
                />
        </mx:State>
    </mx:states>

    <br:FABridge />
    
    <view:AudioView 
        id = "bx_audio"
        visible = "false"
        includeInLayout = "false"
        />
        
    <view:MediaView
    	id="bx_media"
    	visible = "false"
        includeInLayout = "false"
    	/>

    <view:ErrorView 
        id = "bx_error"
        visible = "false"
        includeInLayout = "false"
        />
        
</mx:Application>
